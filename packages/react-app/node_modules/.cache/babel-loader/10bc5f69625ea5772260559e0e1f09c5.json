{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar _asyncIterator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar normaliseInput = require('ipfs-core-utils/src/files/normalise-input');\n\nvar toStream = require('./to-stream');\n\nvar _require = require('nanoid'),\n    nanoid = _require.nanoid;\n\nvar modeToString = require('../lib/mode-to-string');\n\nvar mtimeToObject = require('../lib/mtime-to-object');\n\nvar merge = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nfunction multipartRequest() {\n  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var abortController = arguments.length > 1 ? arguments[1] : undefined;\n  var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var boundary = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"-----------------------------\".concat(nanoid());\n\n  var streamFiles, _streamFiles;\n\n  return _regeneratorRuntime.async(function multipartRequest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _streamFiles = function _streamFiles3() {\n            _streamFiles = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n              var index, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, content, path, mode, mtime, fileSuffix, type, _mtimeToObject, secs, nsecs;\n\n              return _regeneratorRuntime.wrap(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.prev = 0;\n                      index = 0;\n                      _iteratorNormalCompletion = true;\n                      _didIteratorError = false;\n                      _context2.prev = 4;\n                      _iterator = _asyncIterator(normaliseInput(source));\n\n                    case 6:\n                      _context2.next = 8;\n                      return _awaitAsyncGenerator(_iterator.next());\n\n                    case 8:\n                      _step = _context2.sent;\n                      _iteratorNormalCompletion = _step.done;\n                      _context2.next = 12;\n                      return _awaitAsyncGenerator(_step.value);\n\n                    case 12:\n                      _value = _context2.sent;\n\n                      if (_iteratorNormalCompletion) {\n                        _context2.next = 45;\n                        break;\n                      }\n\n                      _value2 = _value, content = _value2.content, path = _value2.path, mode = _value2.mode, mtime = _value2.mtime;\n                      fileSuffix = '';\n                      type = content ? 'file' : 'dir';\n\n                      if (!(index > 0)) {\n                        _context2.next = 21;\n                        break;\n                      }\n\n                      _context2.next = 20;\n                      return '\\r\\n';\n\n                    case 20:\n                      fileSuffix = \"-\".concat(index);\n\n                    case 21:\n                      _context2.next = 23;\n                      return \"--\".concat(boundary, \"\\r\\n\");\n\n                    case 23:\n                      _context2.next = 25;\n                      return \"Content-Disposition: form-data; name=\\\"\".concat(type).concat(fileSuffix, \"\\\"; filename=\\\"\").concat(encodeURIComponent(path), \"\\\"\\r\\n\");\n\n                    case 25:\n                      _context2.next = 27;\n                      return \"Content-Type: \".concat(content ? 'application/octet-stream' : 'application/x-directory', \"\\r\\n\");\n\n                    case 27:\n                      if (!(mode !== null && mode !== undefined)) {\n                        _context2.next = 30;\n                        break;\n                      }\n\n                      _context2.next = 30;\n                      return \"mode: \".concat(modeToString(mode), \"\\r\\n\");\n\n                    case 30:\n                      if (!(mtime != null)) {\n                        _context2.next = 37;\n                        break;\n                      }\n\n                      _mtimeToObject = mtimeToObject(mtime), secs = _mtimeToObject.secs, nsecs = _mtimeToObject.nsecs;\n                      _context2.next = 34;\n                      return \"mtime: \".concat(secs, \"\\r\\n\");\n\n                    case 34:\n                      if (!(nsecs != null)) {\n                        _context2.next = 37;\n                        break;\n                      }\n\n                      _context2.next = 37;\n                      return \"mtime-nsecs: \".concat(nsecs, \"\\r\\n\");\n\n                    case 37:\n                      _context2.next = 39;\n                      return '\\r\\n';\n\n                    case 39:\n                      if (!content) {\n                        _context2.next = 41;\n                        break;\n                      }\n\n                      return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(content), _awaitAsyncGenerator), \"t0\", 41);\n\n                    case 41:\n                      index++;\n\n                    case 42:\n                      _iteratorNormalCompletion = true;\n                      _context2.next = 6;\n                      break;\n\n                    case 45:\n                      _context2.next = 51;\n                      break;\n\n                    case 47:\n                      _context2.prev = 47;\n                      _context2.t1 = _context2[\"catch\"](4);\n                      _didIteratorError = true;\n                      _iteratorError = _context2.t1;\n\n                    case 51:\n                      _context2.prev = 51;\n                      _context2.prev = 52;\n\n                      if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                        _context2.next = 56;\n                        break;\n                      }\n\n                      _context2.next = 56;\n                      return _awaitAsyncGenerator(_iterator.return());\n\n                    case 56:\n                      _context2.prev = 56;\n\n                      if (!_didIteratorError) {\n                        _context2.next = 59;\n                        break;\n                      }\n\n                      throw _iteratorError;\n\n                    case 59:\n                      return _context2.finish(56);\n\n                    case 60:\n                      return _context2.finish(51);\n\n                    case 61:\n                      _context2.next = 66;\n                      break;\n\n                    case 63:\n                      _context2.prev = 63;\n                      _context2.t2 = _context2[\"catch\"](0);\n                      // workaround for https://github.com/node-fetch/node-fetch/issues/753\n                      abortController.abort(_context2.t2);\n\n                    case 66:\n                      _context2.prev = 66;\n                      _context2.next = 69;\n                      return \"\\r\\n--\".concat(boundary, \"--\\r\\n\");\n\n                    case 69:\n                      return _context2.finish(66);\n\n                    case 70:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee, null, [[0, 63, 66, 70], [4, 47, 51, 61], [52,, 56, 60]]);\n            }));\n            return _streamFiles.apply(this, arguments);\n          };\n\n          streamFiles = function _streamFiles2(_x) {\n            return _streamFiles.apply(this, arguments);\n          };\n\n          _context.t0 = merge(headers, {\n            'Content-Type': \"multipart/form-data; boundary=\".concat(boundary)\n          });\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(toStream(streamFiles(source)));\n\n        case 5:\n          _context.t1 = _context.sent;\n          return _context.abrupt(\"return\", {\n            headers: _context.t0,\n            body: _context.t1\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = multipartRequest;","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/lib/multipart-request.js"],"names":["normaliseInput","require","toStream","nanoid","modeToString","mtimeToObject","merge","bind","ignoreUndefined","multipartRequest","source","abortController","headers","boundary","streamFiles","index","content","path","mode","mtime","fileSuffix","type","encodeURIComponent","undefined","secs","nsecs","abort","body","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input')\nconst toStream = require('./to-stream')\nconst { nanoid } = require('nanoid')\nconst modeToString = require('../lib/mode-to-string')\nconst mtimeToObject = require('../lib/mtime-to-object')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\n\nasync function multipartRequest (source = '', abortController, headers = {}, boundary = `-----------------------------${nanoid()}`) {\n  async function * streamFiles (source) {\n    try {\n      let index = 0\n\n      for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n        let fileSuffix = ''\n        const type = content ? 'file' : 'dir'\n\n        if (index > 0) {\n          yield '\\r\\n'\n\n          fileSuffix = `-${index}`\n        }\n\n        yield `--${boundary}\\r\\n`\n        yield `Content-Disposition: form-data; name=\"${type}${fileSuffix}\"; filename=\"${encodeURIComponent(path)}\"\\r\\n`\n        yield `Content-Type: ${content ? 'application/octet-stream' : 'application/x-directory'}\\r\\n`\n\n        if (mode !== null && mode !== undefined) {\n          yield `mode: ${modeToString(mode)}\\r\\n`\n        }\n\n        if (mtime != null) {\n          const {\n            secs, nsecs\n          } = mtimeToObject(mtime)\n\n          yield `mtime: ${secs}\\r\\n`\n\n          if (nsecs != null) {\n            yield `mtime-nsecs: ${nsecs}\\r\\n`\n          }\n        }\n\n        yield '\\r\\n'\n\n        if (content) {\n          yield * content\n        }\n\n        index++\n      }\n    } catch (err) {\n      // workaround for https://github.com/node-fetch/node-fetch/issues/753\n      abortController.abort(err)\n    } finally {\n      yield `\\r\\n--${boundary}--\\r\\n`\n    }\n  }\n\n  return {\n    headers: merge(headers, {\n      'Content-Type': `multipart/form-data; boundary=${boundary}`\n    }),\n    body: await toStream(streamFiles(source))\n  }\n}\n\nmodule.exports = multipartRequest\n"]},"metadata":{},"sourceType":"script"}