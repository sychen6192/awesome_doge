{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _classCallCheck = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _slicedToArray = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('./error'),\n    TimeoutError = _require.TimeoutError,\n    AbortError = _require.AbortError;\n/**\n * @typedef {RequestInit & ExtraFetchOptions} FetchOptions\n * @typedef {Object} ExtraFetchOptions\n * @property {number} [timeout]\n * @property {URLSearchParams} [searchParams]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onUploadProgress]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onDownloadProgress]\n * @property {string} [overrideMimeType]\n * @returns {Promise<Response>}\n */\n\n/**\n * @param {string|URL} url\n * @param {FetchOptions} [options]\n * @returns {Promise<Response>}\n */\n\n\nvar fetch = function fetch(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var request = new XMLHttpRequest();\n  request.open(options.method || 'GET', url.toString(), true);\n  var timeout = options.timeout;\n\n  if (timeout > 0 && timeout < Infinity) {\n    request.timeout = options.timeout;\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n\n  if (options.headers) {\n    var _iterator = _createForOfIteratorHelper(options.headers.entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            name = _step$value[0],\n            value = _step$value[1];\n\n        request.setRequestHeader(name, value);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = function () {\n      return request.abort();\n    };\n  }\n\n  if (options.onDownloadProgress) {\n    request.onprogress = options.onDownloadProgress;\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress;\n  }\n\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {Event} event\n     */\n    var handleEvent = function handleEvent(event) {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    };\n\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent;\n    request.send(options.body);\n  });\n};\n\nexports.fetch = fetch;\nexports.Request = Request;\nexports.Headers = Headers;\n/**\n * @param {string} input\n * @returns {Headers}\n */\n\nvar parseHeaders = function parseHeaders(input) {\n  var headers = new Headers();\n\n  var _iterator2 = _createForOfIteratorHelper(input.trim().split(/[\\r\\n]+/)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var line = _step2.value;\n      var index = line.indexOf(': ');\n\n      if (index > 0) {\n        headers.set(line.slice(0, index), line.slice(index + 1));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return headers;\n};\n\nvar ResponseWithURL = /*#__PURE__*/function (_Response) {\n  _inherits(ResponseWithURL, _Response);\n\n  var _super = _createSuper(ResponseWithURL);\n\n  /**\n   * @param {string} url\n   * @param {string|Blob|ArrayBufferView|ArrayBuffer|FormData|ReadableStream<Uint8Array>} body\n   * @param {ResponseInit} options\n   */\n  function ResponseWithURL(url, body, options) {\n    var _this;\n\n    _classCallCheck(this, ResponseWithURL);\n\n    _this = _super.call(this, body, options);\n    Object.defineProperty(_assertThisInitialized(_this), 'url', {\n      value: url\n    });\n    return _this;\n  }\n\n  return ResponseWithURL;\n}( /*#__PURE__*/_wrapNativeSuper(Response));","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-utils/src/http/fetch.browser.js"],"names":["require","TimeoutError","AbortError","fetch","url","options","request","XMLHttpRequest","open","method","toString","timeout","Infinity","overrideMimeType","headers","entries","name","value","setRequestHeader","signal","onabort","abort","onDownloadProgress","onprogress","onUploadProgress","upload","Promise","resolve","reject","handleEvent","event","type","Response","error","ResponseWithURL","responseURL","response","status","statusText","parseHeaders","getAllResponseHeaders","onerror","onload","ontimeout","send","body","exports","Request","Headers","input","trim","split","line","index","indexOf","set","slice","Object","defineProperty"],"mappings":"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","sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst { TimeoutError, AbortError } = require('./error')\n\n/**\n * @typedef {RequestInit & ExtraFetchOptions} FetchOptions\n * @typedef {Object} ExtraFetchOptions\n * @property {number} [timeout]\n * @property {URLSearchParams} [searchParams]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onUploadProgress]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onDownloadProgress]\n * @property {string} [overrideMimeType]\n * @returns {Promise<Response>}\n */\n\n/**\n * @param {string|URL} url\n * @param {FetchOptions} [options]\n * @returns {Promise<Response>}\n */\nconst fetch = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout } = options\n  if (timeout > 0 && timeout < Infinity) {\n    request.timeout = options.timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (options.headers) {\n    for (const [name, value] of options.headers.entries()) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onDownloadProgress) {\n    request.onprogress = options.onDownloadProgress\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    request.send(options.body)\n  })\n}\nexports.fetch = fetch\nexports.Request = Request\nexports.Headers = Headers\n\n/**\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {string|Blob|ArrayBufferView|ArrayBuffer|FormData|ReadableStream<Uint8Array>} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}