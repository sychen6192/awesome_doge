{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _provide = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cids) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              cids = Array.isArray(cids) ? cids : [cids];\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('dht/provide', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: cids.map(function (cid) {\n                    return new CID(cid).toString();\n                  })\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 4:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 11:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 15;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 15:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 26;\n                break;\n              }\n\n              message = _value;\n              message = toCamel(message);\n              message.id = new CID(message.id);\n\n              if (message.responses) {\n                message.responses = message.responses.map(function (_ref) {\n                  var ID = _ref.ID,\n                      Addrs = _ref.Addrs;\n                  return {\n                    id: ID,\n                    addrs: (Addrs || []).map(function (a) {\n                      return multiaddr(a);\n                    })\n                  };\n                });\n              } else {\n                message.responses = [];\n              }\n\n              _context.next = 23;\n              return message;\n\n            case 23:\n              _iteratorNormalCompletion = true;\n              _context.next = 9;\n              break;\n\n            case 26:\n              _context.next = 32;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 32:\n              _context.prev = 32;\n              _context.prev = 33;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 37;\n                break;\n              }\n\n              _context.next = 37;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 37:\n              _context.prev = 37;\n\n              if (!_didIteratorError) {\n                _context.next = 40;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 40:\n              return _context.finish(37);\n\n            case 41:\n              return _context.finish(32);\n\n            case 42:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 28, 32, 42], [33,, 37, 41]]);\n    }));\n\n    function provide(_x) {\n      return _provide.apply(this, arguments);\n    }\n\n    return provide;\n  }();\n});","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/dht/provide.js"],"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","cids","options","Array","isArray","post","timeout","signal","searchParams","arg","map","cid","toString","headers","res","ndjson","message","id","responses","ID","Addrs","addrs","a","provide"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AAAA,8EAAO,iBAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAgCC,cAAAA,OAAhC,2DAA0C,EAA1C;AACLD,cAAAA,IAAI,GAAGE,KAAK,CAACC,OAAN,CAAcH,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAApC;AADK;AAAA,0CAGaD,GAAG,CAACK,IAAJ,CAAS,aAAT,EAAwB;AACxCC,gBAAAA,OAAO,EAAEJ,OAAO,CAACI,OADuB;AAExCC,gBAAAA,MAAM,EAAEL,OAAO,CAACK,MAFwB;AAGxCC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,EAAER,IAAI,CAACS,GAAL,CAAS,UAAAC,GAAG;AAAA,2BAAI,IAAInB,GAAJ,CAAQmB,GAAR,EAAaC,QAAb,EAAJ;AAAA,mBAAZ;AADwB,mBAE1BV,OAF0B,EAHS;AAOxCW,gBAAAA,OAAO,EAAEX,OAAO,CAACW;AAPuB,eAAxB,CAHb;;AAAA;AAGCC,cAAAA,GAHD;AAAA;AAAA;AAAA;AAAA,yCAaqBA,GAAG,CAACC,MAAJ,EAbrB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAaUC,cAAAA,OAbV;AAcHA,cAAAA,OAAO,GAAGrB,OAAO,CAACqB,OAAD,CAAjB;AACAA,cAAAA,OAAO,CAACC,EAAR,GAAa,IAAIzB,GAAJ,CAAQwB,OAAO,CAACC,EAAhB,CAAb;;AACA,kBAAID,OAAO,CAACE,SAAZ,EAAuB;AACrBF,gBAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBR,GAAlB,CAAsB;AAAA,sBAAGS,EAAH,QAAGA,EAAH;AAAA,sBAAOC,KAAP,QAAOA,KAAP;AAAA,yBAAoB;AAC5DH,oBAAAA,EAAE,EAAEE,EADwD;AAE5DE,oBAAAA,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcV,GAAd,CAAkB,UAAAY,CAAC;AAAA,6BAAI5B,SAAS,CAAC4B,CAAD,CAAb;AAAA,qBAAnB;AAFqD,mBAApB;AAAA,iBAAtB,CAApB;AAID,eALD,MAKO;AACLN,gBAAAA,OAAO,CAACE,SAAR,GAAoB,EAApB;AACD;;AAvBE;AAwBH,qBAAMF,OAAN;;AAxBG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAwBO,OAAxB;AAAA;AAAA;;AAAA,WAAwBA,OAAxB;AAAA;AA2BD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * provide (cids, options = {}) {\n    cids = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cids.map(cid => new CID(cid).toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map(({ ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }))\n      } else {\n        message.responses = []\n      }\n      yield message\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}