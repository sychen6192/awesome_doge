{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar raw = require('ipld-raw');\n\nvar configure = require('../lib/configure');\n\nvar resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n};\nmodule.exports = configure(function (api, options) {\n  var getBlock = require('../block/get')(options);\n\n  var dagResolve = require('./resolve')(options);\n\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n      var options,\n          resolved,\n          block,\n          dagResolver,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return dagResolve(cid, options);\n\n            case 3:\n              resolved = _context.sent;\n              _context.next = 6;\n              return getBlock(resolved.cid, options);\n\n            case 6:\n              block = _context.sent;\n              dagResolver = resolvers[block.cid.codec];\n\n              if (dagResolver) {\n                _context.next = 10;\n                break;\n              }\n\n              throw Object.assign(new Error(\"Missing IPLD format \\\"\".concat(block.cid.codec, \"\\\"\")), {\n                missingMulticodec: cid.codec\n              });\n\n            case 10:\n              if (block.cid.codec === 'raw' && !resolved.remPath) {\n                resolved.remainderPath = '/';\n              }\n\n              return _context.abrupt(\"return\", dagResolver.resolve(block.data, resolved.remainderPath));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/dag/get.js"],"names":["dagPB","require","dagCBOR","raw","configure","resolvers","resolver","module","exports","api","options","getBlock","dagResolve","cid","resolved","block","dagResolver","codec","Object","assign","Error","missingMulticodec","remPath","remainderPath","resolve","data"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AAEA,IAAMI,SAAS,GAAG;AAChB,cAAYH,OAAO,CAACI,QADJ;AAEhB,YAAUN,KAAK,CAACM,QAFA;AAGhBH,EAAAA,GAAG,EAAEA,GAAG,CAACG;AAHO,CAAlB;AAMAC,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAACK,GAAD,EAAMC,OAAN,EAAkB;AAC3C,MAAMC,QAAQ,GAAGV,OAAO,CAAC,cAAD,CAAP,CAAwBS,OAAxB,CAAjB;;AACA,MAAME,UAAU,GAAGX,OAAO,CAAC,WAAD,CAAP,CAAqBS,OAArB,CAAnB;;AAEA;AAAA,wEAAO,iBAAOG,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYH,cAAAA,OAAZ,2DAAsB,EAAtB;AAAA;AAAA,qBACkBE,UAAU,CAACC,GAAD,EAAMH,OAAN,CAD5B;;AAAA;AACCI,cAAAA,QADD;AAAA;AAAA,qBAEeH,QAAQ,CAACG,QAAQ,CAACD,GAAV,EAAeH,OAAf,CAFvB;;AAAA;AAECK,cAAAA,KAFD;AAGCC,cAAAA,WAHD,GAGeX,SAAS,CAACU,KAAK,CAACF,GAAN,CAAUI,KAAX,CAHxB;;AAAA,kBAKAD,WALA;AAAA;AAAA;AAAA;;AAAA,oBAMGE,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,iCAAkCL,KAAK,CAACF,GAAN,CAAUI,KAA5C,QADI,EAEJ;AAAEI,gBAAAA,iBAAiB,EAAER,GAAG,CAACI;AAAzB,eAFI,CANH;;AAAA;AAYL,kBAAIF,KAAK,CAACF,GAAN,CAAUI,KAAV,KAAoB,KAApB,IAA6B,CAACH,QAAQ,CAACQ,OAA3C,EAAoD;AAClDR,gBAAAA,QAAQ,CAACS,aAAT,GAAyB,GAAzB;AACD;;AAdI,+CAgBEP,WAAW,CAACQ,OAAZ,CAAoBT,KAAK,CAACU,IAA1B,EAAgCX,QAAQ,CAACS,aAAzC,CAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAkBD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst raw = require('ipld-raw')\nconst configure = require('../lib/configure')\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n}\n\nmodule.exports = configure((api, options) => {\n  const getBlock = require('../block/get')(options)\n  const dagResolve = require('./resolve')(options)\n\n  return async (cid, options = {}) => {\n    const resolved = await dagResolve(cid, options)\n    const block = await getBlock(resolved.cid, options)\n    const dagResolver = resolvers[block.cid.codec]\n\n    if (!dagResolver) {\n      throw Object.assign(\n        new Error(`Missing IPLD format \"${block.cid.codec}\"`),\n        { missingMulticodec: cid.codec }\n      )\n    }\n\n    if (block.cid.codec === 'raw' && !resolved.remPath) {\n      resolved.remainderPath = '/'\n    }\n\n    return dagResolver.resolve(block.data, resolved.remainderPath)\n  }\n})\n"]},"metadata":{},"sourceType":"script"}