{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n * @param {AsyncIterable<Buffer>|Iterable<Buffer>} stream\n * @returns {Promise<Buffer>}\n */\n\n\nfunction toBuffer(stream) {\n  var buffer, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buf;\n\n  return _regeneratorRuntime.async(function toBuffer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          buffer = Buffer.alloc(0);\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _context.prev = 3;\n          _iterator = _asyncIterator(stream);\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 7:\n          _step = _context.sent;\n          _iteratorNormalCompletion = _step.done;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(_step.value);\n\n        case 11:\n          _value = _context.sent;\n\n          if (_iteratorNormalCompletion) {\n            _context.next = 18;\n            break;\n          }\n\n          buf = _value;\n          buffer = Buffer.concat([buffer, buf], buffer.length + buf.length);\n\n        case 15:\n          _iteratorNormalCompletion = true;\n          _context.next = 5;\n          break;\n\n        case 18:\n          _context.next = 24;\n          break;\n\n        case 20:\n          _context.prev = 20;\n          _context.t0 = _context[\"catch\"](3);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 24:\n          _context.prev = 24;\n          _context.prev = 25;\n\n          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n            _context.next = 29;\n            break;\n          }\n\n          _context.next = 29;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 29:\n          _context.prev = 29;\n\n          if (!_didIteratorError) {\n            _context.next = 32;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 32:\n          return _context.finish(29);\n\n        case 33:\n          return _context.finish(24);\n\n        case 34:\n          return _context.abrupt(\"return\", buffer);\n\n        case 35:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 20, 24, 34], [25,, 29, 33]], Promise);\n}\n\nmodule.exports = toBuffer;","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/it-to-buffer/index.js"],"names":["require","Buffer","toBuffer","stream","buffer","alloc","buf","concat","length","module","exports"],"mappings":"AAAA;;;;;;eAEmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;AAER;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAeC,QAAf,CAAyBC,MAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACMC,UAAAA,MADN,GACeH,MAAM,CAACI,KAAP,CAAa,CAAb,CADf;AAAA;AAAA;AAAA;AAAA,qCAG0BF,MAH1B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGmBG,UAAAA,GAHnB;AAIIF,UAAAA,MAAM,GAAGH,MAAM,CAACM,MAAP,CAAc,CAACH,MAAD,EAASE,GAAT,CAAd,EAA6BF,MAAM,CAACI,MAAP,GAAgBF,GAAG,CAACE,MAAjD,CAAT;;AAJJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,2CAOSJ,MAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUAK,MAAM,CAACC,OAAP,GAAiBR,QAAjB","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\n\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n * @param {AsyncIterable<Buffer>|Iterable<Buffer>} stream\n * @returns {Promise<Buffer>}\n */\nasync function toBuffer (stream) {\n  let buffer = Buffer.alloc(0)\n\n  for await (const buf of stream) {\n    buffer = Buffer.concat([buffer, buf], buffer.length + buf.length)\n  }\n\n  return buffer\n}\n\nmodule.exports = toBuffer\n"]},"metadata":{},"sourceType":"script"}