{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst blobToIt = require('blob-to-it');\n\nconst itPeekable = require('it-peekable');\n\nconst all = require('it-all');\n\nconst map = require('it-map');\n\nconst {\n  isBytes,\n  isBlob\n} = require('./utils');\n\nasync function* toAsyncIterable(input) {\n  // Bytes | String\n  if (isBytes(input) || typeof input === 'string' || input instanceof String) {\n    yield toBuffer(input);\n    return;\n  } // Blob\n\n\n  if (isBlob(input)) {\n    yield* blobToIt(input);\n    return;\n  } // Browser stream\n\n\n  if (typeof input.getReader === 'function') {\n    input = browserStreamToIt(input);\n  } // (Async)Iterator<?>\n\n\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield* peekable;\n      return;\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n\n    if (Number.isInteger(value)) {\n      yield toBuffer(await all(peekable));\n      return;\n    } // (Async)Iterable<Bytes|String>\n\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield* map(peekable, chunk => toBuffer(chunk));\n      return;\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n\nfunction toBuffer(chunk) {\n  return isBytes(chunk) ? chunk : Buffer.from(chunk);\n}\n\nmodule.exports = toAsyncIterable;","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-content.js"],"names":["errCode","require","Buffer","browserStreamToIt","blobToIt","itPeekable","all","map","isBytes","isBlob","toAsyncIterable","input","String","toBuffer","getReader","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","chunk","Error","from","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,8BAAD,CAAjC;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMK,GAAG,GAAGL,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMM,GAAG,GAAGN,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAM;AACJO,EAAAA,OADI;AAEJC,EAAAA;AAFI,IAGFR,OAAO,CAAC,SAAD,CAHX;;AAKA,gBAAiBS,eAAjB,CAAkCC,KAAlC,EAAyC;AACvC;AACA,MAAIH,OAAO,CAACG,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYC,MAApE,EAA4E;AAC1E,UAAMC,QAAQ,CAACF,KAAD,CAAd;AACA;AACD,GALsC,CAOvC;;;AACA,MAAIF,MAAM,CAACE,KAAD,CAAV,EAAmB;AACjB,WAAQP,QAAQ,CAACO,KAAD,CAAhB;AACA;AACD,GAXsC,CAavC;;;AACA,MAAI,OAAOA,KAAK,CAACG,SAAb,KAA2B,UAA/B,EAA2C;AACzCH,IAAAA,KAAK,GAAGR,iBAAiB,CAACQ,KAAD,CAAzB;AACD,GAhBsC,CAkBvC;;;AACA,MAAIA,KAAK,CAACI,MAAM,CAACC,QAAR,CAAL,IAA0BL,KAAK,CAACI,MAAM,CAACE,aAAR,CAAnC,EAA2D;AACzD,UAAMC,QAAQ,GAAGb,UAAU,CAACM,KAAD,CAA3B;AACA,UAAM;AAAEQ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkB,MAAMF,QAAQ,CAACG,IAAT,EAA9B;;AAEA,QAAID,IAAJ,EAAU;AACR;AACA,aAAQF,QAAR;AACA;AACD;;AAEDA,IAAAA,QAAQ,CAACI,IAAT,CAAcH,KAAd,EAVyD,CAYzD;;AACA,QAAII,MAAM,CAACC,SAAP,CAAiBL,KAAjB,CAAJ,EAA6B;AAC3B,YAAMN,QAAQ,CAAC,MAAMP,GAAG,CAACY,QAAD,CAAV,CAAd;AACA;AACD,KAhBwD,CAkBzD;;;AACA,QAAIV,OAAO,CAACW,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYP,MAApE,EAA4E;AAC1E,aAAQL,GAAG,CAACW,QAAD,EAAWO,KAAK,IAAIZ,QAAQ,CAACY,KAAD,CAA5B,CAAX;AACA;AACD;AACF;;AAED,QAAMzB,OAAO,CAAC,IAAI0B,KAAJ,CAAW,qBAAoBf,KAAM,EAArC,CAAD,EAA0C,sBAA1C,CAAb;AACD;;AAED,SAASE,QAAT,CAAmBY,KAAnB,EAA0B;AACxB,SAAOjB,OAAO,CAACiB,KAAD,CAAP,GAAiBA,KAAjB,GAAyBvB,MAAM,CAACyB,IAAP,CAAYF,KAAZ,CAAhC;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBnB,eAAjB","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { Buffer } = require('buffer')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst blobToIt = require('blob-to-it')\nconst itPeekable = require('it-peekable')\nconst all = require('it-all')\nconst map = require('it-map')\nconst {\n  isBytes,\n  isBlob\n} = require('./utils')\n\nasync function * toAsyncIterable (input) {\n  // Bytes | String\n  if (isBytes(input) || typeof input === 'string' || input instanceof String) {\n    yield toBuffer(input)\n    return\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    yield * blobToIt(input)\n    return\n  }\n\n  // Browser stream\n  if (typeof input.getReader === 'function') {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * peekable\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      yield toBuffer(await all(peekable))\n      return\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield * map(peekable, chunk => toBuffer(chunk))\n      return\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\nfunction toBuffer (chunk) {\n  return isBytes(chunk) ? chunk : Buffer.from(chunk)\n}\n\nmodule.exports = toAsyncIterable\n"]},"metadata":{},"sourceType":"script"}