{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst itPeekable = require('it-peekable');\n\nconst map = require('it-map');\n\nconst {\n  isBytes,\n  isBlob,\n  isFileObject\n} = require('./utils');\n\nmodule.exports = async function* normaliseInput(input, normaliseContent) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  } // String\n\n\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  } // Buffer|ArrayBuffer|TypedArray\n  // Blob|File\n\n\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  } // Browser ReadableStream\n\n\n  if (typeof input.getReader === 'function') {\n    input = browserStreamToIt(input);\n  } // Iterable<?>\n\n\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield* peekable;\n      return;\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n\n    if (Number.isInteger(value) || isBytes(value)) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    } // (Async)Iterable<Blob>\n    // (Async)Iterable<String>\n    // (Async)Iterable<{ path, content }>\n\n\n    if (isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    } // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n\n\n    if (value[Symbol.iterator] || value[Symbol.asyncIterator] || typeof value.getReader === 'function') {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    }\n  } // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a\n  // `path` property that passes this check.\n\n\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n};\n\nasync function toFileObject(input, normaliseContent) {\n  const obj = {\n    path: input.path || '',\n    mode: input.mode,\n    mtime: input.mtime\n  };\n\n  if (input.content) {\n    obj.content = await normaliseContent(input.content);\n  } else if (!input.path) {\n    // Not already a file object with path or content prop\n    obj.content = await normaliseContent(input);\n  }\n\n  return obj;\n}","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-input.js"],"names":["errCode","require","browserStreamToIt","itPeekable","map","isBytes","isBlob","isFileObject","module","exports","normaliseInput","input","normaliseContent","undefined","Error","String","toFileObject","getReader","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","obj","path","mode","mtime","content"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,8BAAD,CAAjC;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAM;AACJI,EAAAA,OADI;AAEJC,EAAAA,MAFI;AAGJC,EAAAA;AAHI,IAIFN,OAAO,CAAC,SAAD,CAJX;;AAMAO,MAAM,CAACC,OAAP,GAAiB,gBAAiBC,cAAjB,CAAiCC,KAAjC,EAAwCC,gBAAxC,EAA0D;AACzE;AACA,MAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKE,SAAhC,EAA2C;AACzC,UAAMb,OAAO,CAAC,IAAIc,KAAJ,CAAW,qBAAoBH,KAAM,EAArC,CAAD,EAA0C,sBAA1C,CAAb;AACD,GAJwE,CAMzE;;;AACA,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYI,MAAlD,EAA0D;AACxD,UAAMC,YAAY,CAACL,KAAD,EAAQC,gBAAR,CAAlB;AACA;AACD,GAVwE,CAYzE;AACA;;;AACA,MAAIP,OAAO,CAACM,KAAD,CAAP,IAAkBL,MAAM,CAACK,KAAD,CAA5B,EAAqC;AACnC,UAAMK,YAAY,CAACL,KAAD,EAAQC,gBAAR,CAAlB;AACA;AACD,GAjBwE,CAmBzE;;;AACA,MAAI,OAAOD,KAAK,CAACM,SAAb,KAA2B,UAA/B,EAA2C;AACzCN,IAAAA,KAAK,GAAGT,iBAAiB,CAACS,KAAD,CAAzB;AACD,GAtBwE,CAwBzE;;;AACA,MAAIA,KAAK,CAACO,MAAM,CAACC,QAAR,CAAL,IAA0BR,KAAK,CAACO,MAAM,CAACE,aAAR,CAAnC,EAA2D;AACzD,UAAMC,QAAQ,GAAGlB,UAAU,CAACQ,KAAD,CAA3B;AACA,UAAM;AAAEW,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkB,MAAMF,QAAQ,CAACG,IAAT,EAA9B;;AAEA,QAAID,IAAJ,EAAU;AACR;AACA,aAAQF,QAAR;AACA;AACD;;AAEDA,IAAAA,QAAQ,CAACI,IAAT,CAAcH,KAAd,EAVyD,CAYzD;AACA;;AACA,QAAII,MAAM,CAACC,SAAP,CAAiBL,KAAjB,KAA2BjB,OAAO,CAACiB,KAAD,CAAtC,EAA+C;AAC7C,YAAMN,YAAY,CAACK,QAAD,EAAWT,gBAAX,CAAlB;AACA;AACD,KAjBwD,CAmBzD;AACA;AACA;;;AACA,QAAIL,YAAY,CAACe,KAAD,CAAZ,IAAuBhB,MAAM,CAACgB,KAAD,CAA7B,IAAwC,OAAOA,KAAP,KAAiB,QAAzD,IAAqEA,KAAK,YAAYP,MAA1F,EAAkG;AAChG,aAAQX,GAAG,CAACiB,QAAD,EAAYC,KAAD,IAAWN,YAAY,CAACM,KAAD,EAAQV,gBAAR,CAAlC,CAAX;AACA;AACD,KAzBwD,CA2BzD;AACA;AACA;AACA;;;AACA,QAAIU,KAAK,CAACJ,MAAM,CAACC,QAAR,CAAL,IAA0BG,KAAK,CAACJ,MAAM,CAACE,aAAR,CAA/B,IAAyD,OAAOE,KAAK,CAACL,SAAb,KAA2B,UAAxF,EAAoG;AAClG,aAAQb,GAAG,CAACiB,QAAD,EAAYC,KAAD,IAAWN,YAAY,CAACM,KAAD,EAAQV,gBAAR,CAAlC,CAAX;AACA;AACD;AACF,GA5DwE,CA8DzE;AACA;AACA;;;AACA,MAAIL,YAAY,CAACI,KAAD,CAAhB,EAAyB;AACvB,UAAMK,YAAY,CAACL,KAAD,EAAQC,gBAAR,CAAlB;AACA;AACD;;AAED,QAAMZ,OAAO,CAAC,IAAIc,KAAJ,CAAU,uBAAuB,OAAOH,KAAxC,CAAD,EAAiD,sBAAjD,CAAb;AACD,CAvED;;AAyEA,eAAeK,YAAf,CAA6BL,KAA7B,EAAoCC,gBAApC,EAAsD;AACpD,QAAMgB,GAAG,GAAG;AACVC,IAAAA,IAAI,EAAElB,KAAK,CAACkB,IAAN,IAAc,EADV;AAEVC,IAAAA,IAAI,EAAEnB,KAAK,CAACmB,IAFF;AAGVC,IAAAA,KAAK,EAAEpB,KAAK,CAACoB;AAHH,GAAZ;;AAMA,MAAIpB,KAAK,CAACqB,OAAV,EAAmB;AACjBJ,IAAAA,GAAG,CAACI,OAAJ,GAAc,MAAMpB,gBAAgB,CAACD,KAAK,CAACqB,OAAP,CAApC;AACD,GAFD,MAEO,IAAI,CAACrB,KAAK,CAACkB,IAAX,EAAiB;AAAE;AACxBD,IAAAA,GAAG,CAACI,OAAJ,GAAc,MAAMpB,gBAAgB,CAACD,KAAD,CAApC;AACD;;AAED,SAAOiB,GAAP;AACD","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst itPeekable = require('it-peekable')\nconst map = require('it-map')\nconst {\n  isBytes,\n  isBlob,\n  isFileObject\n} = require('./utils')\n\nmodule.exports = async function * normaliseInput (input, normaliseContent) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Buffer|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (typeof input.getReader === 'function') {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * peekable\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value) || isBytes(value)) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<Blob>\n    // (Async)Iterable<String>\n    // (Async)Iterable<{ path, content }>\n    if (isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String) {\n      yield * map(peekable, (value) => toFileObject(value, normaliseContent))\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (value[Symbol.iterator] || value[Symbol.asyncIterator] || typeof value.getReader === 'function') {\n      yield * map(peekable, (value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\nasync function toFileObject (input, normaliseContent) {\n  const obj = {\n    path: input.path || '',\n    mode: input.mode,\n    mtime: input.mtime\n  }\n\n  if (input.content) {\n    obj.content = await normaliseContent(input.content)\n  } else if (!input.path) { // Not already a file object with path or content prop\n    obj.content = await normaliseContent(input)\n  }\n\n  return obj\n}\n"]},"metadata":{},"sourceType":"script"}