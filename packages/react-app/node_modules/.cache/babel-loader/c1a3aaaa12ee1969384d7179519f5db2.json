{"ast":null,"code":"'use strict'; // browsers can't stream. When the 'Send ReadableStream in request body' row\n// is green here: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#Browser_compatibility\n// we'll be able to wrap the passed iterator in the it-to-browser-readablestream module\n// in the meantime we have to convert the whole thing to a BufferSource of some sort\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar toBuffer = require('it-to-buffer');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nmodule.exports = function (it) {\n  function bufferise(_x) {\n    return _bufferise.apply(this, arguments);\n  }\n\n  function _bufferise() {\n    _bufferise = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 2;\n              _iterator = _asyncIterator(source);\n\n            case 4:\n              _context.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 6:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 10;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 10:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 23;\n                break;\n              }\n\n              chunk = _value;\n\n              if (!Buffer.isBuffer(chunk)) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 16;\n              return chunk;\n\n            case 16:\n              _context.next = 20;\n              break;\n\n            case 18:\n              _context.next = 20;\n              return Buffer.from(chunk);\n\n            case 20:\n              _iteratorNormalCompletion = true;\n              _context.next = 4;\n              break;\n\n            case 23:\n              _context.next = 29;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 29:\n              _context.prev = 29;\n              _context.prev = 30;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 34;\n                break;\n              }\n\n              _context.next = 34;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 34:\n              _context.prev = 34;\n\n              if (!_didIteratorError) {\n                _context.next = 37;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 37:\n              return _context.finish(34);\n\n            case 38:\n              return _context.finish(29);\n\n            case 39:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 25, 29, 39], [30,, 34, 38]]);\n    }));\n    return _bufferise.apply(this, arguments);\n  }\n\n  return toBuffer(bufferise(it));\n};","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/lib/to-stream.browser.js"],"names":["toBuffer","require","Buffer","module","exports","it","bufferise","source","chunk","isBuffer","from"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;;;;;;;;;;AACA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAxB;;eACmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AAERC,MAAM,CAACC,OAAP,GAAiB,UAACC,EAAD,EAAQ;AAAA,WACNC,SADM;AAAA;AAAA;;AAAA;AAAA,4EACvB,iBAA4BC,MAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAC4BA,MAD5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACmBC,cAAAA,KADnB;;AAAA,mBAEQN,MAAM,CAACO,QAAP,CAAgBD,KAAhB,CAFR;AAAA;AAAA;AAAA;;AAAA;AAGM,qBAAMA,KAAN;;AAHN;AAAA;AAAA;;AAAA;AAAA;AAKM,qBAAMN,MAAM,CAACQ,IAAP,CAAYF,KAAZ,CAAN;;AALN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADuB;AAAA;AAAA;;AAWvB,SAAOR,QAAQ,CAACM,SAAS,CAACD,EAAD,CAAV,CAAf;AACD,CAZD","sourcesContent":["'use strict'\n\n// browsers can't stream. When the 'Send ReadableStream in request body' row\n// is green here: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#Browser_compatibility\n// we'll be able to wrap the passed iterator in the it-to-browser-readablestream module\n// in the meantime we have to convert the whole thing to a BufferSource of some sort\nconst toBuffer = require('it-to-buffer')\nconst { Buffer } = require('buffer')\n\nmodule.exports = (it) => {\n  async function * bufferise (source) {\n    for await (const chunk of source) {\n      if (Buffer.isBuffer(chunk)) {\n        yield chunk\n      } else {\n        yield Buffer.from(chunk)\n      }\n    }\n  }\n\n  return toBuffer(bufferise(it))\n}\n"]},"metadata":{},"sourceType":"script"}