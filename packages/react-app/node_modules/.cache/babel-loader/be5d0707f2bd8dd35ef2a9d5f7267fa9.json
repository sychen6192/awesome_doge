{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar dagPB = require('ipld-dag-pb');\n\nvar ipldRaw = require('ipld-raw');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar configure = require('../lib/configure');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar anySignal = require('any-signal');\n\nvar AbortController = require('abort-controller');\n\nvar multicodec = require('multicodec');\n\nmodule.exports = configure(function (api, opts) {\n  var _formats;\n\n  var formats = (_formats = {}, _defineProperty(_formats, multicodec.DAG_PB, dagPB), _defineProperty(_formats, multicodec.DAG_CBOR, dagCBOR), _defineProperty(_formats, multicodec.RAW, ipldRaw), _formats);\n  var ipldOptions = opts && opts.ipld || {};\n  var configuredFormats = ipldOptions && ipldOptions.formats || [];\n  configuredFormats.forEach(function (format) {\n    formats[format.codec] = format;\n  });\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dagNode) {\n      var options,\n          cid,\n          number,\n          format,\n          serialized,\n          controller,\n          signal,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (!(options.cid && (options.format || options.hashAlg))) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n\n            case 5:\n              if (!(options.format && !options.hashAlg || !options.format && options.hashAlg)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n\n            case 7:\n              if (options.cid) {\n                cid = new CID(options.cid);\n                options = _objectSpread(_objectSpread({}, options), {}, {\n                  format: cid.codec,\n                  hashAlg: multihash.decode(cid.multihash).name\n                });\n                delete options.cid;\n              }\n\n              options = _objectSpread({\n                format: 'dag-cbor',\n                hashAlg: 'sha2-256',\n                inputEnc: 'raw'\n              }, options);\n              number = multicodec.getNumber(options.format);\n              format = formats[number];\n\n              if (format) {\n                _context.next = 18;\n                break;\n              }\n\n              if (!(opts && opts.ipld && opts.ipld.loadFormat)) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 15;\n              return opts.ipld.loadFormat(options.format);\n\n            case 15:\n              format = _context.sent;\n\n            case 16:\n              if (format) {\n                _context.next = 18;\n                break;\n              }\n\n              throw new Error('Format unsupported - please add support using the options.ipld.formats or options.ipld.loadFormat options');\n\n            case 18:\n              if (!(!format.util || !format.util.serialize)) {\n                _context.next = 20;\n                break;\n              }\n\n              throw new Error('Format does not support utils.serialize function');\n\n            case 20:\n              serialized = format.util.serialize(dagNode); // allow aborting requests on body errors\n\n              controller = new AbortController();\n              signal = anySignal([controller.signal, options.signal]);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: options.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(options)\n              };\n              _context.next = 28;\n              return multipartRequest(serialized, controller, options.headers);\n\n            case 28:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 32;\n              return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n            case 32:\n              res = _context.sent;\n              _context.next = 35;\n              return res.json();\n\n            case 35:\n              data = _context.sent;\n              return _context.abrupt(\"return\", new CID(data.Cid['/']));\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/dag/put.js"],"names":["dagCBOR","require","dagPB","ipldRaw","CID","multihash","configure","multipartRequest","toUrlSearchParams","anySignal","AbortController","multicodec","module","exports","api","opts","formats","DAG_PB","DAG_CBOR","RAW","ipldOptions","ipld","configuredFormats","forEach","format","codec","dagNode","options","cid","hashAlg","Error","decode","name","inputEnc","number","getNumber","loadFormat","util","serialize","serialized","controller","signal","timeout","searchParams","headers","post","res","json","data","Cid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst dagCBOR = require('ipld-dag-cbor')\nconst dagPB = require('ipld-dag-pb')\nconst ipldRaw = require('ipld-raw')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst anySignal = require('any-signal')\nconst AbortController = require('abort-controller')\nconst multicodec = require('multicodec')\n\nmodule.exports = configure((api, opts) => {\n  const formats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: ipldRaw\n  }\n\n  const ipldOptions = (opts && opts.ipld) || {}\n  const configuredFormats = (ipldOptions && ipldOptions.formats) || []\n  configuredFormats.forEach(format => {\n    formats[format.codec] = format\n  })\n\n  return async (dagNode, options = {}) => {\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options')\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options')\n    }\n\n    if (options.cid) {\n      const cid = new CID(options.cid)\n      options = {\n        ...options,\n        format: cid.codec,\n        hashAlg: multihash.decode(cid.multihash).name\n      }\n      delete options.cid\n    }\n\n    options = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...options\n    }\n\n    const number = multicodec.getNumber(options.format)\n    let format = formats[number]\n\n    if (!format) {\n      if (opts && opts.ipld && opts.ipld.loadFormat) {\n        format = await opts.ipld.loadFormat(options.format)\n      }\n\n      if (!format) {\n        throw new Error('Format unsupported - please add support using the options.ipld.formats or options.ipld.loadFormat options')\n      }\n    }\n\n    if (!format.util || !format.util.serialize) {\n      throw new Error('Format does not support utils.serialize function')\n    }\n\n    const serialized = format.util.serialize(dagNode)\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('dag/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(serialized, controller, options.headers)\n      )\n    })\n    const data = await res.json()\n\n    return new CID(data.Cid['/'])\n  }\n})\n"]},"metadata":{},"sourceType":"script"}