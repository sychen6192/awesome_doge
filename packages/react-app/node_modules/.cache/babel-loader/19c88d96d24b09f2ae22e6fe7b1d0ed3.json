{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          result,\n          _iterator2,\n          _step2,\n          entry,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (!(!path || typeof path !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('ipfs.files.ls requires a path');\n\n            case 3:\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('files/ls', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  arg: CID.isCID(path) ? \"/ipfs/\".concat(path) : path,\n                  // default long to true, diverges from go-ipfs where its false by default\n                  long: true\n                }, options), {}, {\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 5:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 10:\n              _context.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 12:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 16;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 16:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 44;\n                break;\n              }\n\n              result = _value;\n\n              if (!('Entries' in result)) {\n                _context.next = 39;\n                break;\n              }\n\n              _iterator2 = _createForOfIteratorHelper(result.Entries || []);\n              _context.prev = 21;\n\n              _iterator2.s();\n\n            case 23:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 29;\n                break;\n              }\n\n              entry = _step2.value;\n              _context.next = 27;\n              return toCoreInterface(toCamelWithMetadata(entry));\n\n            case 27:\n              _context.next = 23;\n              break;\n\n            case 29:\n              _context.next = 34;\n              break;\n\n            case 31:\n              _context.prev = 31;\n              _context.t0 = _context[\"catch\"](21);\n\n              _iterator2.e(_context.t0);\n\n            case 34:\n              _context.prev = 34;\n\n              _iterator2.f();\n\n              return _context.finish(34);\n\n            case 37:\n              _context.next = 41;\n              break;\n\n            case 39:\n              _context.next = 41;\n              return toCoreInterface(toCamelWithMetadata(result));\n\n            case 41:\n              _iteratorNormalCompletion = true;\n              _context.next = 10;\n              break;\n\n            case 44:\n              _context.next = 50;\n              break;\n\n            case 46:\n              _context.prev = 46;\n              _context.t1 = _context[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n\n            case 50:\n              _context.prev = 50;\n              _context.prev = 51;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 55;\n                break;\n              }\n\n              _context.next = 55;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 55:\n              _context.prev = 55;\n\n              if (!_didIteratorError) {\n                _context.next = 58;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 58:\n              return _context.finish(55);\n\n            case 59:\n              return _context.finish(50);\n\n            case 60:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 46, 50, 60], [21, 31, 34, 37], [51,, 55, 59]]);\n    }));\n\n    function ls(_x) {\n      return _ls.apply(this, arguments);\n    }\n\n    return ls;\n  }();\n});\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/files/ls.js"],"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","path","options","Error","post","timeout","signal","searchParams","arg","isCID","long","stream","headers","res","ndjson","result","Entries","entry","toCoreInterface","ls","hash","cid"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AAAA,yEAAO,iBAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA2BC,cAAAA,OAA3B,2DAAqC,EAArC;;AAAA,oBACD,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QADxB;AAAA;AAAA;AAAA;;AAAA,oBAEG,IAAIE,KAAJ,CAAU,+BAAV,CAFH;;AAAA;AAAA;AAAA,0CAKaH,GAAG,CAACI,IAAJ,CAAS,UAAT,EAAqB;AACrCC,gBAAAA,OAAO,EAAEH,OAAO,CAACG,OADoB;AAErCC,gBAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFqB;AAGrCC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,EAAEf,GAAG,CAACgB,KAAJ,CAAUR,IAAV,oBAA2BA,IAA3B,IAAoCA,IADZ;AAE7B;AACAS,kBAAAA,IAAI,EAAE;AAHuB,mBAI1BR,OAJ0B;AAK7BS,kBAAAA,MAAM,EAAE;AALqB,mBAHM;AAUrCC,gBAAAA,OAAO,EAAEV,OAAO,CAACU;AAVoB,eAArB,CALb;;AAAA;AAKCC,cAAAA,GALD;AAAA;AAAA;AAAA;AAAA,yCAkBsBA,GAAG,CAACC,MAAJ,EAlBtB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAkBYC,cAAAA,MAlBZ;;AAAA,oBAoBC,aAAaA,MApBd;AAAA;AAAA;AAAA;;AAAA,sDAqBmBA,MAAM,CAACC,OAAP,IAAkB,EArBrC;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBUC,cAAAA,KArBV;AAAA;AAsBC,qBAAMC,eAAe,CAACvB,mBAAmB,CAACsB,KAAD,CAApB,CAArB;;AAtBD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyBD,qBAAMC,eAAe,CAACvB,mBAAmB,CAACoB,MAAD,CAApB,CAArB;;AAzBC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAwBI,EAAxB;AAAA;AAAA;;AAAA,WAAwBA,EAAxB;AAAA;AA6BD,CA9ByB,CAA1B;;AAgCA,SAASD,eAAT,CAA0BD,KAA1B,EAAiC;AAC/B,MAAIA,KAAK,CAACG,IAAV,EAAgBH,KAAK,CAACI,GAAN,GAAY,IAAI5B,GAAJ,CAAQwB,KAAK,CAACG,IAAd,CAAZ;AAChB,SAAOH,KAAK,CAACG,IAAb;AACA,SAAOH,KAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * ls (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.isCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n})\n\nfunction toCoreInterface (entry) {\n  if (entry.hash) entry.cid = new CID(entry.hash)\n  delete entry.hash\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}