{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async (peerId, options = {}) => {\n    peerId = typeof peerId === 'string' ? peerId : new CID(peerId).toString();\n    const res = await (await api.post('bitswap/wantlist', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        peer: peerId\n      }),\n      headers: options.headers\n    })).json();\n    return (res.Keys || []).map(k => new CID(k['/']));\n  };\n});","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","peerId","options","toString","res","post","timeout","signal","searchParams","peer","headers","json","Keys","map","k"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,OAAOC,MAAP,EAAeC,OAAO,GAAG,EAAzB,KAAgC;AACrCD,IAAAA,MAAM,GAAG,OAAOA,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,IAAIP,GAAJ,CAAQO,MAAR,EAAgBE,QAAhB,EAA/C;AAEA,UAAMC,GAAG,GAAG,MAAM,CAAC,MAAMJ,GAAG,CAACK,IAAJ,CAAS,kBAAT,EAA6B;AACpDC,MAAAA,OAAO,EAAEJ,OAAO,CAACI,OADmC;AAEpDC,MAAAA,MAAM,EAAEL,OAAO,CAACK,MAFoC;AAGpDC,MAAAA,YAAY,EAAEX,iBAAiB,CAAC,EAC9B,GAAGK,OAD2B;AAE9BO,QAAAA,IAAI,EAAER;AAFwB,OAAD,CAHqB;AAOpDS,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAPmC,KAA7B,CAAP,EAQdC,IARc,EAAlB;AAUA,WAAO,CAACP,GAAG,CAACQ,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqBC,CAAC,IAAI,IAAIpB,GAAJ,CAAQoB,CAAC,CAAC,GAAD,CAAT,CAA1B,CAAP;AACD,GAdD;AAeD,CAhByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (peerId, options = {}) => {\n    peerId = typeof peerId === 'string' ? peerId : new CID(peerId).toString()\n\n    const res = await (await api.post('bitswap/wantlist', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map(k => new CID(k['/']))\n  }\n})\n"]},"metadata":{},"sourceType":"script"}