{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* ls(path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.isCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result));\n      }\n    }\n  };\n});\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/files/ls.js"],"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","ls","path","options","Error","res","post","timeout","signal","searchParams","arg","isCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","hash","cid"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,gBAAiBC,EAAjB,CAAqBC,IAArB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AAC9C,QAAI,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrC,YAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,UAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,OAAO,EAAEJ,OAAO,CAACI,OADoB;AAErCC,MAAAA,MAAM,EAAEL,OAAO,CAACK,MAFqB;AAGrCC,MAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,QAAAA,GAAG,EAAEjB,GAAG,CAACkB,KAAJ,CAAUT,IAAV,IAAmB,SAAQA,IAAK,EAAhC,GAAoCA,IADX;AAE9B;AACAU,QAAAA,IAAI,EAAE,IAHwB;AAI9B,WAAGT,OAJ2B;AAK9BU,QAAAA,MAAM,EAAE;AALsB,OAAD,CAHM;AAUrCC,MAAAA,OAAO,EAAEX,OAAO,CAACW;AAVoB,KAArB,CAAlB;;AAaA,eAAW,MAAMC,MAAjB,IAA2BV,GAAG,CAACW,MAAJ,EAA3B,EAAyC;AACvC;AACA,UAAI,aAAaD,MAAjB,EAAyB;AACvB,aAAK,MAAME,KAAX,IAAoBF,MAAM,CAACG,OAAP,IAAkB,EAAtC,EAA0C;AACxC,gBAAMC,eAAe,CAACxB,mBAAmB,CAACsB,KAAD,CAApB,CAArB;AACD;AACF,OAJD,MAIO;AACL,cAAME,eAAe,CAACxB,mBAAmB,CAACoB,MAAD,CAApB,CAArB;AACD;AACF;AACF,GA5BD;AA6BD,CA9ByB,CAA1B;;AAgCA,SAASI,eAAT,CAA0BF,KAA1B,EAAiC;AAC/B,MAAIA,KAAK,CAACG,IAAV,EAAgBH,KAAK,CAACI,GAAN,GAAY,IAAI5B,GAAJ,CAAQwB,KAAK,CAACG,IAAd,CAAZ;AAChB,SAAOH,KAAK,CAACG,IAAb;AACA,SAAOH,KAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * ls (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.isCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n})\n\nfunction toCoreInterface (entry) {\n  if (entry.hash) entry.cid = new CID(entry.hash)\n  delete entry.hash\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}