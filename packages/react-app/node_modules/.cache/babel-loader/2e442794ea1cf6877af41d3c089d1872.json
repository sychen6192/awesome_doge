{"ast":null,"code":"import { useCallback, useEffect, useState } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"; // Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\n\nconst INFURA_ID = \"66fbccb2856b40b3a622d925568379e9\";\nconst NETWORK_NAME = \"rinkeby\";\n\nfunction useWeb3Modal(config = {}) {\n  const [provider, setProvider] = useState();\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const {\n    autoLoad = true,\n    infuraId = INFURA_ID,\n    NETWORK = NETWORK_NAME\n  } = config; // Web3Modal also supports many other wallets.\n  // You can see other options at https://github.com/Web3Modal/web3modal\n\n  const web3Modal = new Web3Modal({\n    network: NETWORK,\n    cacheProvider: true,\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId\n        }\n      }\n    }\n  });\n\n  subscribeProvider = async provider => {\n    if (!provider.on) {\n      return;\n    }\n\n    provider.on(\"close\", () => {\n      this.resetApp();\n    });\n    provider.on(\"disconnect\", () => {\n      this.resetApp();\n    });\n    provider.on(\"accountsChanged\", async accounts => {\n      await this.setState({\n        address: accounts[0]\n      }); //await this.getAccountAssets();\n    });\n    provider.on(\"chainChanged\", async chainId => {\n      const {\n        web3\n      } = this.state;\n      const networkId = await web3.eth.net.getId();\n      await this.setState({\n        chainId,\n        networkId\n      }); //await this.getAccountAssets();\n    });\n    provider.on(\"networkChanged\", async networkId => {\n      const {\n        web3\n      } = this.state;\n      const chainId = await web3.eth.chainId();\n      await this.setState({\n        chainId,\n        networkId\n      }); //await this.getAccountAssets();\n    });\n  }; // Open wallet selection modal.\n\n\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n  const logoutOfWeb3Modal = useCallback(async function () {\n    await web3Modal.clearCachedProvider();\n    window.location.reload();\n  }, [web3Modal]); // If autoLoad is enabled and the the wallet had been loaded before, load it automatically now.\n\n  useEffect(() => {\n    if (autoLoad && !autoLoaded && web3Modal.cachedProvider) {\n      loadWeb3Modal();\n      setAutoLoaded(true);\n    }\n  }, [autoLoad, autoLoaded, loadWeb3Modal, setAutoLoaded, web3Modal.cachedProvider]);\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;","map":{"version":3,"sources":["/Users/sychen/thesis-app/packages/react-app/src/hooks/useWeb3Modal.js"],"names":["useCallback","useEffect","useState","Web3Provider","Web3Modal","WalletConnectProvider","INFURA_ID","NETWORK_NAME","useWeb3Modal","config","provider","setProvider","autoLoaded","setAutoLoaded","autoLoad","infuraId","NETWORK","web3Modal","network","cacheProvider","providerOptions","walletconnect","package","options","subscribeProvider","on","resetApp","accounts","setState","address","chainId","web3","state","networkId","eth","net","getId","loadWeb3Modal","newProvider","connect","logoutOfWeb3Modal","clearCachedProvider","window","location","reload","cachedProvider"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = \"66fbccb2856b40b3a622d925568379e9\";\n\nconst NETWORK_NAME = \"rinkeby\";\n\nfunction useWeb3Modal(config = {}) {\n  const [provider, setProvider] = useState();\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const { autoLoad = true, infuraId = INFURA_ID, NETWORK = NETWORK_NAME } = config;\n\n  // Web3Modal also supports many other wallets.\n  // You can see other options at https://github.com/Web3Modal/web3modal\n  const web3Modal = new Web3Modal({\n    network: NETWORK,\n    cacheProvider: true,\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId,\n        },\n      },\n    },\n  });\n  \n  subscribeProvider = async (provider: any) => {\n    if (!provider.on) {\n      return;\n    }\n    \n    provider.on(\"close\", () => {\n      this.resetApp()\n    });\n    \n    provider.on(\"disconnect\", () => {\n      this.resetApp()\n    });\n    \n    provider.on(\"accountsChanged\", async (accounts: string[]) => {\n      await this.setState({ address: accounts[0] });\n      //await this.getAccountAssets();\n    });\n    \n    provider.on(\"chainChanged\", async (chainId: number) => {\n      const { web3 } = this.state;\n      const networkId = await web3.eth.net.getId();\n      await this.setState({ chainId, networkId });\n      //await this.getAccountAssets();\n    });\n\n    provider.on(\"networkChanged\", async (networkId: number) => {\n      const { web3 } = this.state;\n      const chainId = await web3.eth.chainId();\n      await this.setState({ chainId, networkId });\n      //await this.getAccountAssets();\n    });\n  };\n  \n\n  // Open wallet selection modal.\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n\n  const logoutOfWeb3Modal = useCallback(\n    async function () {\n      await web3Modal.clearCachedProvider();\n      window.location.reload();\n    },\n    [web3Modal],\n  );\n\n  // If autoLoad is enabled and the the wallet had been loaded before, load it automatically now.\n  useEffect(() => {\n    if (autoLoad && !autoLoaded && web3Modal.cachedProvider) {\n      loadWeb3Modal();\n      setAutoLoaded(true);\n    }\n  }, [autoLoad, autoLoaded, loadWeb3Modal, setAutoLoaded, web3Modal.cachedProvider]);\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n"]},"metadata":{},"sourceType":"module"}