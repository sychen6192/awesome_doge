{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar errCode = require('err-code');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar browserStreamToIt = require('browser-readablestream-to-it');\n\nvar blobToIt = require('blob-to-it');\n\nvar itPeekable = require('it-peekable');\n\nvar all = require('it-all');\n\nvar map = require('it-map');\n\nvar _require2 = require('./utils'),\n    isBytes = _require2.isBytes,\n    isBlob = _require2.isBlob;\n\nfunction toAsyncIterable(_x) {\n  return _toAsyncIterable.apply(this, arguments);\n}\n\nfunction _toAsyncIterable() {\n  _toAsyncIterable = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var peekable, _yield$_awaitAsyncGen, value, done;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(isBytes(input) || typeof input === 'string' || input instanceof String)) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 3;\n            return toBuffer(input);\n\n          case 3:\n            return _context.abrupt(\"return\");\n\n          case 4:\n            if (!isBlob(input)) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(blobToIt(input)), _awaitAsyncGenerator), \"t0\", 6);\n\n          case 6:\n            return _context.abrupt(\"return\");\n\n          case 7:\n            // Browser stream\n            if (typeof input.getReader === 'function') {\n              input = browserStreamToIt(input);\n            } // (Async)Iterator<?>\n\n\n            if (!(input[Symbol.iterator] || input[Symbol.asyncIterator])) {\n              _context.next = 30;\n              break;\n            }\n\n            peekable = itPeekable(input);\n            _context.next = 12;\n            return _awaitAsyncGenerator(peekable.peek());\n\n          case 12:\n            _yield$_awaitAsyncGen = _context.sent;\n            value = _yield$_awaitAsyncGen.value;\n            done = _yield$_awaitAsyncGen.done;\n\n            if (!done) {\n              _context.next = 18;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(peekable), _awaitAsyncGenerator), \"t1\", 17);\n\n          case 17:\n            return _context.abrupt(\"return\");\n\n          case 18:\n            peekable.push(value); // (Async)Iterable<Number>\n\n            if (!Number.isInteger(value)) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.t2 = toBuffer;\n            _context.next = 23;\n            return _awaitAsyncGenerator(all(peekable));\n\n          case 23:\n            _context.t3 = _context.sent;\n            _context.next = 26;\n            return (0, _context.t2)(_context.t3);\n\n          case 26:\n            return _context.abrupt(\"return\");\n\n          case 27:\n            if (!(isBytes(value) || typeof value === 'string' || value instanceof String)) {\n              _context.next = 30;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function (chunk) {\n              return toBuffer(chunk);\n            })), _awaitAsyncGenerator), \"t4\", 29);\n\n          case 29:\n            return _context.abrupt(\"return\");\n\n          case 30:\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _toAsyncIterable.apply(this, arguments);\n}\n\nfunction toBuffer(chunk) {\n  return isBytes(chunk) ? chunk : Buffer.from(chunk);\n}\n\nmodule.exports = toAsyncIterable;","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-content.js"],"names":["errCode","require","Buffer","browserStreamToIt","blobToIt","itPeekable","all","map","isBytes","isBlob","toAsyncIterable","input","String","toBuffer","getReader","Symbol","iterator","asyncIterator","peekable","peek","value","done","push","Number","isInteger","chunk","Error","from","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;eACmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,iBAAiB,GAAGF,OAAO,CAAC,8BAAD,CAAjC;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAMI,UAAU,GAAGJ,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMK,GAAG,GAAGL,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAMM,GAAG,GAAGN,OAAO,CAAC,QAAD,CAAnB;;gBAIIA,OAAO,CAAC,SAAD,C;IAFTO,O,aAAAA,O;IACAC,M,aAAAA,M;;SAGeC,e;;;;;gFAAjB,iBAAkCC,KAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEMH,OAAO,CAACG,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYC,MAFtE;AAAA;AAAA;AAAA;;AAAA;AAGI,mBAAMC,QAAQ,CAACF,KAAD,CAAd;;AAHJ;AAAA;;AAAA;AAAA,iBAQMF,MAAM,CAACE,KAAD,CARZ;AAAA;AAAA;AAAA;;AASI,iFAAQP,QAAQ,CAACO,KAAD,CAAhB;;AATJ;AAAA;;AAAA;AAaE;AACA,gBAAI,OAAOA,KAAK,CAACG,SAAb,KAA2B,UAA/B,EAA2C;AACzCH,cAAAA,KAAK,GAAGR,iBAAiB,CAACQ,KAAD,CAAzB;AACD,aAhBH,CAkBE;;;AAlBF,kBAmBMA,KAAK,CAACI,MAAM,CAACC,QAAR,CAAL,IAA0BL,KAAK,CAACI,MAAM,CAACE,aAAR,CAnBrC;AAAA;AAAA;AAAA;;AAoBUC,YAAAA,QApBV,GAoBqBb,UAAU,CAACM,KAAD,CApB/B;AAAA;AAAA,wCAqBkCO,QAAQ,CAACC,IAAT,EArBlC;;AAAA;AAAA;AAqBYC,YAAAA,KArBZ,yBAqBYA,KArBZ;AAqBmBC,YAAAA,IArBnB,yBAqBmBA,IArBnB;;AAAA,iBAuBQA,IAvBR;AAAA;AAAA;AAAA;;AAyBM,iFAAQH,QAAR;;AAzBN;AAAA;;AAAA;AA6BIA,YAAAA,QAAQ,CAACI,IAAT,CAAcF,KAAd,EA7BJ,CA+BI;;AA/BJ,iBAgCQG,MAAM,CAACC,SAAP,CAAiBJ,KAAjB,CAhCR;AAAA;AAAA;AAAA;;AAAA,0BAiCYP,QAjCZ;AAAA;AAAA,wCAiC2BP,GAAG,CAACY,QAAD,CAjC9B;;AAAA;AAAA;AAAA;AAiCM;;AAjCN;AAAA;;AAAA;AAAA,kBAsCQV,OAAO,CAACY,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYR,MAtCxE;AAAA;AAAA;AAAA;;AAuCM,iFAAQL,GAAG,CAACW,QAAD,EAAW,UAAAO,KAAK;AAAA,qBAAIZ,QAAQ,CAACY,KAAD,CAAZ;AAAA,aAAhB,CAAX;;AAvCN;AAAA;;AAAA;AAAA,kBA4CQzB,OAAO,CAAC,IAAI0B,KAAJ,6BAA+Bf,KAA/B,EAAD,EAA0C,sBAA1C,CA5Cf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA+CA,SAASE,QAAT,CAAmBY,KAAnB,EAA0B;AACxB,SAAOjB,OAAO,CAACiB,KAAD,CAAP,GAAiBA,KAAjB,GAAyBvB,MAAM,CAACyB,IAAP,CAAYF,KAAZ,CAAhC;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBnB,eAAjB","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { Buffer } = require('buffer')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst blobToIt = require('blob-to-it')\nconst itPeekable = require('it-peekable')\nconst all = require('it-all')\nconst map = require('it-map')\nconst {\n  isBytes,\n  isBlob\n} = require('./utils')\n\nasync function * toAsyncIterable (input) {\n  // Bytes | String\n  if (isBytes(input) || typeof input === 'string' || input instanceof String) {\n    yield toBuffer(input)\n    return\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    yield * blobToIt(input)\n    return\n  }\n\n  // Browser stream\n  if (typeof input.getReader === 'function') {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * peekable\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      yield toBuffer(await all(peekable))\n      return\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield * map(peekable, chunk => toBuffer(chunk))\n      return\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\nfunction toBuffer (chunk) {\n  return isBytes(chunk) ? chunk : Buffer.from(chunk)\n}\n\nmodule.exports = toAsyncIterable\n"]},"metadata":{},"sourceType":"script"}