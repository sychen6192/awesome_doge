{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar toCamel = require('./lib/object-to-camel');\n\nvar configure = require('./lib/configure');\n\nvar multipartRequest = require('./lib/multipart-request');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n\nvar anySignal = require('any-signal');\n\nvar AbortController = require('abort-controller');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n      var options,\n          progressFn,\n          controller,\n          signal,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          file,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              progressFn = options.progress; // allow aborting requests on body errors\n\n              controller = new AbortController();\n              signal = anySignal([controller.signal, options.signal]);\n              _context.t0 = _awaitAsyncGenerator;\n              _context.t1 = api;\n              _context.t2 = _objectSpread;\n              _context.t3 = {\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  'stream-channels': true\n                }, options), {}, {\n                  progress: Boolean(progressFn)\n                })),\n                timeout: options.timeout,\n                signal: signal\n              };\n              _context.next = 10;\n              return _awaitAsyncGenerator(multipartRequest(input, controller, options.headers));\n\n            case 10:\n              _context.t4 = _context.sent;\n              _context.t5 = (0, _context.t2)(_context.t3, _context.t4);\n              _context.t6 = _context.t1.post.call(_context.t1, 'add', _context.t5);\n              _context.next = 15;\n              return (0, _context.t0)(_context.t6);\n\n            case 15:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 18;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 20:\n              _context.next = 22;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 22:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 26;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 26:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 39;\n                break;\n              }\n\n              file = _value;\n              file = toCamel(file);\n\n              if (!(progressFn && file.bytes)) {\n                _context.next = 34;\n                break;\n              }\n\n              progressFn(file.bytes);\n              _context.next = 36;\n              break;\n\n            case 34:\n              _context.next = 36;\n              return toCoreInterface(file);\n\n            case 36:\n              _iteratorNormalCompletion = true;\n              _context.next = 20;\n              break;\n\n            case 39:\n              _context.next = 45;\n              break;\n\n            case 41:\n              _context.prev = 41;\n              _context.t7 = _context[\"catch\"](18);\n              _didIteratorError = true;\n              _iteratorError = _context.t7;\n\n            case 45:\n              _context.prev = 45;\n              _context.prev = 46;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 50;\n                break;\n              }\n\n              _context.next = 50;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 50:\n              _context.prev = 50;\n\n              if (!_didIteratorError) {\n                _context.next = 53;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 53:\n              return _context.finish(50);\n\n            case 54:\n              return _context.finish(45);\n\n            case 55:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[18, 41, 45, 55], [46,, 50, 54]]);\n    }));\n\n    function addAll(_x) {\n      return _addAll.apply(this, arguments);\n    }\n\n    return addAll;\n  }();\n});\n\nfunction toCoreInterface(_ref) {\n  var name = _ref.name,\n      hash = _ref.hash,\n      size = _ref.size,\n      mode = _ref.mode,\n      mtime = _ref.mtime,\n      mtimeNsecs = _ref.mtimeNsecs;\n  var output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/add-all.js"],"names":["CID","require","toCamel","configure","multipartRequest","toUrlSearchParams","anySignal","AbortController","module","exports","api","input","options","progressFn","progress","controller","signal","searchParams","Boolean","timeout","headers","post","res","ndjson","file","bytes","toCoreInterface","addAll","name","hash","size","mode","mtime","mtimeNsecs","output","path","cid","parseInt","secs","nsecs"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst multipartRequest = require('./lib/multipart-request')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst anySignal = require('any-signal')\nconst AbortController = require('abort-controller')\n\nmodule.exports = configure((api) => {\n  return async function * addAll (input, options = {}) {\n    const progressFn = options.progress\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      timeout: options.timeout,\n      signal,\n      ...(\n        await multipartRequest(input, controller, options.headers)\n      )\n    })\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file)\n\n      if (progressFn && file.bytes) {\n        progressFn(file.bytes)\n      } else {\n        yield toCoreInterface(file)\n      }\n    }\n  }\n})\n\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  const output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"]},"metadata":{},"sourceType":"script"}