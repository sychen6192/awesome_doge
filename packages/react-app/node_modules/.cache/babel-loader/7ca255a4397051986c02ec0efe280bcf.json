{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst {\n  TimeoutError,\n  AbortError\n} = require('./error');\n/**\n * @typedef {RequestInit & ExtraFetchOptions} FetchOptions\n * @typedef {Object} ExtraFetchOptions\n * @property {number} [timeout]\n * @property {URLSearchParams} [searchParams]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onUploadProgress]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onDownloadProgress]\n * @property {string} [overrideMimeType]\n * @returns {Promise<Response>}\n */\n\n/**\n * @param {string|URL} url\n * @param {FetchOptions} [options]\n * @returns {Promise<Response>}\n */\n\n\nconst fetch = (url, options = {}) => {\n  const request = new XMLHttpRequest();\n  request.open(options.method || 'GET', url.toString(), true);\n  const {\n    timeout\n  } = options;\n\n  if (timeout > 0 && timeout < Infinity) {\n    request.timeout = options.timeout;\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n\n  if (options.headers) {\n    for (const [name, value] of options.headers.entries()) {\n      request.setRequestHeader(name, value);\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort();\n  }\n\n  if (options.onDownloadProgress) {\n    request.onprogress = options.onDownloadProgress;\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress;\n  }\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = event => {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    };\n\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent;\n    request.send(options.body);\n  });\n};\n\nexports.fetch = fetch;\nexports.Request = Request;\nexports.Headers = Headers;\n/**\n * @param {string} input\n * @returns {Headers}\n */\n\nconst parseHeaders = input => {\n  const headers = new Headers();\n\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ');\n\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1));\n    }\n  }\n\n  return headers;\n};\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {string|Blob|ArrayBufferView|ArrayBuffer|FormData|ReadableStream<Uint8Array>} body\n   * @param {ResponseInit} options\n   */\n  constructor(url, body, options) {\n    super(body, options);\n    Object.defineProperty(this, 'url', {\n      value: url\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-utils/src/http/fetch.browser.js"],"names":["TimeoutError","AbortError","require","fetch","url","options","request","XMLHttpRequest","open","method","toString","timeout","Infinity","overrideMimeType","headers","name","value","entries","setRequestHeader","signal","onabort","abort","onDownloadProgress","onprogress","onUploadProgress","upload","Promise","resolve","reject","handleEvent","event","type","Response","error","ResponseWithURL","responseURL","response","status","statusText","parseHeaders","getAllResponseHeaders","onerror","onload","ontimeout","send","body","exports","Request","Headers","input","line","trim","split","index","indexOf","set","slice","constructor","Object","defineProperty"],"mappings":"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","sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst { TimeoutError, AbortError } = require('./error')\n\n/**\n * @typedef {RequestInit & ExtraFetchOptions} FetchOptions\n * @typedef {Object} ExtraFetchOptions\n * @property {number} [timeout]\n * @property {URLSearchParams} [searchParams]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onUploadProgress]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onDownloadProgress]\n * @property {string} [overrideMimeType]\n * @returns {Promise<Response>}\n */\n\n/**\n * @param {string|URL} url\n * @param {FetchOptions} [options]\n * @returns {Promise<Response>}\n */\nconst fetch = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout } = options\n  if (timeout > 0 && timeout < Infinity) {\n    request.timeout = options.timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (options.headers) {\n    for (const [name, value] of options.headers.entries()) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onDownloadProgress) {\n    request.onprogress = options.onDownloadProgress\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    request.send(options.body)\n  })\n}\nexports.fetch = fetch\nexports.Request = Request\nexports.Headers = Headers\n\n/**\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {string|Blob|ArrayBufferView|ArrayBuffer|FormData|ReadableStream<Uint8Array>} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}