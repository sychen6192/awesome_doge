{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _slicedToArray = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Multiaddr = require('multiaddr');\n\nvar toUri = require('multiaddr-to-uri');\n\nvar _require = require('ipfs-utils/src/env'),\n    isBrowser = _require.isBrowser,\n    isWebWorker = _require.isWebWorker;\n\nvar _require2 = require('iso-url'),\n    URL = _require2.URL;\n\nvar parseDuration = require('parse-duration').default;\n\nvar log = require('debug')('ipfs-http-client:lib:error-handler');\n\nvar HTTP = require('ipfs-utils/src/http');\n\nvar merge = require('merge-options');\n\nvar isMultiaddr = function isMultiaddr(input) {\n  try {\n    Multiaddr(input); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nvar normalizeInput = function normalizeInput() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (isMultiaddr(options)) {\n    options = {\n      url: toUri(options)\n    };\n  } else if (typeof options === 'string') {\n    options = {\n      url: options\n    };\n  }\n\n  var url = new URL(options.url);\n\n  if (options.apiPath) {\n    url.pathname = options.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n\n  if (!options.url) {\n    if (isBrowser || isWebWorker) {\n      url.protocol = options.protocol || location.protocol;\n      url.hostname = options.host || location.hostname;\n      url.port = options.port || location.port;\n    } else {\n      url.hostname = options.host || 'localhost';\n      url.port = options.port || '5001';\n      url.protocol = options.protocol || 'http';\n    }\n  }\n\n  options.url = url;\n  return options;\n};\n\nvar errorHandler = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n    var msg, data, error;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(response.headers.get('Content-Type') || '').startsWith('application/json')) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 4;\n            return response.json();\n\n          case 4:\n            data = _context.sent;\n            log(data);\n            msg = data.Message || data.message;\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return response.text();\n\n          case 11:\n            msg = _context.sent;\n\n          case 12:\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            log('Failed to parse error response', _context.t0); // Failed to extract/parse error message from response\n\n            msg = _context.t0.message;\n\n          case 18:\n            error = new HTTP.HTTPError(response); // This is what go-ipfs returns where there's a timeout\n\n            if (msg && msg.includes('context deadline exceeded')) {\n              error = new HTTP.TimeoutError(response);\n            } // If we managed to extract a message from the response, use it\n\n\n            if (msg) {\n              error.message = msg;\n            }\n\n            throw error;\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 14]]);\n  }));\n\n  return function errorHandler(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nvar kebabCase = function kebabCase(str) {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n\nvar parseTimeout = function parseTimeout(value) {\n  return typeof value === 'string' ? parseDuration(value) : value;\n};\n/**\n * @typedef {Object} ClientOptions\n * @prop {string} [host]\n * @prop {number} [port]\n * @prop {string} [protocol]\n * @prop {Headers|Record<string, string>} [headers] - Request headers.\n * @prop {number|string} [timeout] - Amount of time until request should timeout in ms or humand readable. https://www.npmjs.com/package/parse-duration for valid string values.\n * @prop {string} [apiPath] - Path to the API.\n * @prop {URL|string} [url] - Full API URL.\n */\n\n\nvar Client = /*#__PURE__*/function (_HTTP) {\n  _inherits(Client, _HTTP);\n\n  var _super = _createSuper(Client);\n\n  /**\n   *\n   * @param {ClientOptions|URL|Multiaddr|string} options\n   */\n  function Client() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    /** @type {ClientOptions} */\n    var opts = normalizeInput(options);\n    _this = _super.call(this, {\n      timeout: parseTimeout(opts.timeout) || 60000 * 20,\n      headers: opts.headers,\n      base: normalizeInput(opts.url).toString(),\n      handleError: errorHandler,\n      transformSearchParams: function transformSearchParams(search) {\n        var out = new URLSearchParams(); // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n\n        var _iterator = _createForOfIteratorHelper(search),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n\n            if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n              out.append(kebabCase(key), value);\n            } // server timeouts are strings\n\n\n            if (key === 'timeout' && !isNaN(value)) {\n              out.append(kebabCase(key), value);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return out;\n      }\n    });\n    delete _this.get;\n    delete _this.put;\n    delete _this.delete;\n    delete _this.options;\n    var fetch = _this.fetch;\n\n    _this.fetch = function (resource) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return fetch.call(_assertThisInitialized(_this), resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n\n    return _this;\n  }\n\n  return Client;\n}(HTTP);\n\nClient.errorHandler = errorHandler;\nmodule.exports = Client;","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/lib/core.js"],"names":["Multiaddr","require","toUri","isBrowser","isWebWorker","URL","parseDuration","default","log","HTTP","merge","isMultiaddr","input","e","normalizeInput","options","url","apiPath","pathname","undefined","protocol","location","hostname","host","port","errorHandler","response","headers","get","startsWith","json","data","msg","Message","message","text","error","HTTPError","includes","TimeoutError","KEBAB_REGEX","kebabCase","str","replace","match","toLowerCase","parseTimeout","value","Client","opts","timeout","base","toString","handleError","transformSearchParams","search","out","URLSearchParams","key","append","isNaN","put","delete","fetch","resource","call","method","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/* eslint-env browser */\nconst Multiaddr = require('multiaddr')\nconst toUri = require('multiaddr-to-uri')\nconst { isBrowser, isWebWorker } = require('ipfs-utils/src/env')\nconst { URL } = require('iso-url')\nconst parseDuration = require('parse-duration').default\nconst log = require('debug')('ipfs-http-client:lib:error-handler')\nconst HTTP = require('ipfs-utils/src/http')\nconst merge = require('merge-options')\n\nconst isMultiaddr = (input) => {\n  try {\n    Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nconst normalizeInput = (options = {}) => {\n  if (isMultiaddr(options)) {\n    options = { url: toUri(options) }\n  } else if (typeof options === 'string') {\n    options = { url: options }\n  }\n\n  const url = new URL(options.url)\n  if (options.apiPath) {\n    url.pathname = options.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n  if (!options.url) {\n    if (isBrowser || isWebWorker) {\n      url.protocol = options.protocol || location.protocol\n      url.hostname = options.host || location.hostname\n      url.port = options.port || location.port\n    } else {\n      url.hostname = options.host || 'localhost'\n      url.port = options.port || '5001'\n      url.protocol = options.protocol || 'http'\n    }\n  }\n  options.url = url\n\n  return options\n}\n\nconst errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  let error = new HTTP.HTTPError(response)\n\n  // This is what go-ipfs returns where there's a timeout\n  if (msg && msg.includes('context deadline exceeded')) {\n    error = new HTTP.TimeoutError(response)\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\n/**\n * @typedef {Object} ClientOptions\n * @prop {string} [host]\n * @prop {number} [port]\n * @prop {string} [protocol]\n * @prop {Headers|Record<string, string>} [headers] - Request headers.\n * @prop {number|string} [timeout] - Amount of time until request should timeout in ms or humand readable. https://www.npmjs.com/package/parse-duration for valid string values.\n * @prop {string} [apiPath] - Path to the API.\n * @prop {URL|string} [url] - Full API URL.\n */\n\nclass Client extends HTTP {\n  /**\n   *\n   * @param {ClientOptions|URL|Multiaddr|string} options\n   */\n  constructor (options = {}) {\n    /** @type {ClientOptions} */\n    const opts = normalizeInput(options)\n    super({\n      timeout: parseTimeout(opts.timeout) || 60000 * 20,\n      headers: opts.headers,\n      base: normalizeInput(opts.url).toString(),\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      }\n    })\n\n    delete this.get\n    delete this.put\n    delete this.delete\n    delete this.options\n\n    const fetch = this.fetch\n\n    this.fetch = (resource, options = {}) => {\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nClient.errorHandler = errorHandler\n\nmodule.exports = Client\n"]},"metadata":{},"sourceType":"script"}