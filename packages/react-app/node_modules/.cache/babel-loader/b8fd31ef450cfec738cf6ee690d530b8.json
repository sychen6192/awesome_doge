{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require = require('./response-types'),\n    Provider = _require.Provider;\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _findProvs = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _iterator2,\n          _step2,\n          _step2$value,\n          ID,\n          Addrs,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('dht/findprovs', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(new CID(cid))\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 3:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 8:\n              _context.next = 10;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 10:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 14;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 14:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 38;\n                break;\n              }\n\n              message = _value;\n\n              if (!(message.Type === Provider && message.Responses)) {\n                _context.next = 35;\n                break;\n              }\n\n              _iterator2 = _createForOfIteratorHelper(message.Responses);\n              _context.prev = 19;\n\n              _iterator2.s();\n\n            case 21:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 27;\n                break;\n              }\n\n              _step2$value = _step2.value, ID = _step2$value.ID, Addrs = _step2$value.Addrs;\n              _context.next = 25;\n              return {\n                id: ID,\n                addrs: (Addrs || []).map(function (a) {\n                  return multiaddr(a);\n                })\n              };\n\n            case 25:\n              _context.next = 21;\n              break;\n\n            case 27:\n              _context.next = 32;\n              break;\n\n            case 29:\n              _context.prev = 29;\n              _context.t0 = _context[\"catch\"](19);\n\n              _iterator2.e(_context.t0);\n\n            case 32:\n              _context.prev = 32;\n\n              _iterator2.f();\n\n              return _context.finish(32);\n\n            case 35:\n              _iteratorNormalCompletion = true;\n              _context.next = 8;\n              break;\n\n            case 38:\n              _context.next = 44;\n              break;\n\n            case 40:\n              _context.prev = 40;\n              _context.t1 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n\n            case 44:\n              _context.prev = 44;\n              _context.prev = 45;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 49;\n                break;\n              }\n\n              _context.next = 49;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 49:\n              _context.prev = 49;\n\n              if (!_didIteratorError) {\n                _context.next = 52;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 52:\n              return _context.finish(49);\n\n            case 53:\n              return _context.finish(44);\n\n            case 54:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 40, 44, 54], [19, 29, 32, 35], [45,, 49, 53]]);\n    }));\n\n    function findProvs(_x) {\n      return _findProvs.apply(this, arguments);\n    }\n\n    return findProvs;\n  }();\n});","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/dht/find-provs.js"],"names":["CID","require","multiaddr","configure","toUrlSearchParams","Provider","module","exports","api","cid","options","post","timeout","signal","searchParams","arg","headers","res","ndjson","message","Type","Responses","ID","Addrs","id","addrs","map","a","findProvs"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;eACqBA,OAAO,CAAC,kBAAD,C;IAApBI,Q,YAAAA,Q;;AAERC,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AAAA,gFAAO,iBAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiCC,cAAAA,OAAjC,2DAA2C,EAA3C;AAAA;AAAA,0CACaF,GAAG,CAACG,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADyB;AAE1CC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAF0B;AAG1CC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,YAAK,IAAIf,GAAJ,CAAQS,GAAR,CAAL;AAD0B,mBAE1BC,OAF0B,EAHW;AAO1CM,gBAAAA,OAAO,EAAEN,OAAO,CAACM;AAPyB,eAA1B,CADb;;AAAA;AACCC,cAAAA,GADD;AAAA;AAAA;AAAA;AAAA,yCAWuBA,GAAG,CAACC,MAAJ,EAXvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAWYC,cAAAA,OAXZ;;AAAA,oBAYCA,OAAO,CAACC,IAAR,KAAiBf,QAAjB,IAA6Bc,OAAO,CAACE,SAZtC;AAAA;AAAA;AAAA;;AAAA,sDAa2BF,OAAO,CAACE,SAbnC;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,2CAaYC,EAbZ,gBAaYA,EAbZ,EAagBC,KAbhB,gBAagBA,KAbhB;AAAA;AAcC,qBAAM;AACJC,gBAAAA,EAAE,EAAEF,EADA;AAEJG,gBAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkB,UAAAC,CAAC;AAAA,yBAAIzB,SAAS,CAACyB,CAAD,CAAb;AAAA,iBAAnB;AAFH,eAAN;;AAdD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAwBC,SAAxB;AAAA;AAAA;;AAAA,WAAwBA,SAAxB;AAAA;AAsBD,CAvByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Provider } = require('./response-types')\n\nmodule.exports = configure(api => {\n  return async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${new CID(cid)}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const { ID, Addrs } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => multiaddr(a))\n          }\n        }\n      }\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}