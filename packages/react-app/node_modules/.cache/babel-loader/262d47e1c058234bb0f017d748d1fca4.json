{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _put = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              _context.t0 = _awaitAsyncGenerator;\n              _context.t1 = api;\n              _context.t2 = _objectSpread;\n              _context.t3 = {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: key\n                }, options))\n              };\n              _context.next = 7;\n              return _awaitAsyncGenerator(multipartRequest(value, options.headers));\n\n            case 7:\n              _context.t4 = _context.sent;\n              _context.t5 = (0, _context.t2)(_context.t3, _context.t4);\n              _context.t6 = _context.t1.post.call(_context.t1, 'dht/put', _context.t5);\n              _context.next = 12;\n              return (0, _context.t0)(_context.t6);\n\n            case 12:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 15;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 17:\n              _context.next = 19;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 19:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 23;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 23:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 34;\n                break;\n              }\n\n              message = _value;\n              message = toCamel(message);\n              message.id = new CID(message.id);\n\n              if (message.responses) {\n                message.responses = message.responses.map(function (_ref) {\n                  var ID = _ref.ID,\n                      Addrs = _ref.Addrs;\n                  return {\n                    id: ID,\n                    addrs: (Addrs || []).map(function (a) {\n                      return multiaddr(a);\n                    })\n                  };\n                });\n              }\n\n              _context.next = 31;\n              return message;\n\n            case 31:\n              _iteratorNormalCompletion = true;\n              _context.next = 17;\n              break;\n\n            case 34:\n              _context.next = 40;\n              break;\n\n            case 36:\n              _context.prev = 36;\n              _context.t7 = _context[\"catch\"](15);\n              _didIteratorError = true;\n              _iteratorError = _context.t7;\n\n            case 40:\n              _context.prev = 40;\n              _context.prev = 41;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 45;\n                break;\n              }\n\n              _context.next = 45;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 45:\n              _context.prev = 45;\n\n              if (!_didIteratorError) {\n                _context.next = 48;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 48:\n              return _context.finish(45);\n\n            case 49:\n              return _context.finish(40);\n\n            case 50:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[15, 36, 40, 50], [41,, 45, 49]]);\n    }));\n\n    function put(_x, _x2) {\n      return _put.apply(this, arguments);\n    }\n\n    return put;\n  }();\n});","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/dht/put.js"],"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","multipartRequest","module","exports","api","key","value","options","timeout","signal","searchParams","arg","headers","post","res","ndjson","message","id","responses","map","ID","Addrs","addrs","a","put"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAMK,gBAAgB,GAAGL,OAAO,CAAC,0BAAD,CAAhC;;AAEAM,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AAAA,0EAAO,iBAAsBC,GAAtB,EAA2BC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAkCC,cAAAA,OAAlC,2DAA4C,EAA5C;AAAA;AAAA,4BACaH,GADb;AAAA;AAAA;AAEHI,gBAAAA,OAAO,EAAED,OAAO,CAACC,OAFd;AAGHC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MAHb;AAIHC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,EAAEN;AADwB,mBAE1BE,OAF0B;AAJ5B;AAAA;AAAA,0CASKN,gBAAgB,CAACK,KAAD,EAAQC,OAAO,CAACK,OAAhB,CATrB;;AAAA;AAAA;AAAA;AAAA,wCACiBC,IADjB,mBACsB,SADtB;AAAA;AAAA;;AAAA;AACCC,cAAAA,GADD;AAAA;AAAA;AAAA;AAAA,yCAaqBA,GAAG,CAACC,MAAJ,EAbrB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAaUC,cAAAA,OAbV;AAcHA,cAAAA,OAAO,GAAGlB,OAAO,CAACkB,OAAD,CAAjB;AACAA,cAAAA,OAAO,CAACC,EAAR,GAAa,IAAItB,GAAJ,CAAQqB,OAAO,CAACC,EAAhB,CAAb;;AACA,kBAAID,OAAO,CAACE,SAAZ,EAAuB;AACrBF,gBAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBC,GAAlB,CAAsB;AAAA,sBAAGC,EAAH,QAAGA,EAAH;AAAA,sBAAOC,KAAP,QAAOA,KAAP;AAAA,yBAAoB;AAC5DJ,oBAAAA,EAAE,EAAEG,EADwD;AAE5DE,oBAAAA,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkB,UAAAI,CAAC;AAAA,6BAAI1B,SAAS,CAAC0B,CAAD,CAAb;AAAA,qBAAnB;AAFqD,mBAApB;AAAA,iBAAtB,CAApB;AAID;;AArBE;AAsBH,qBAAMP,OAAN;;AAtBG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAwBQ,GAAxB;AAAA;AAAA;;AAAA,WAAwBA,GAAxB;AAAA;AAyBD,CA1ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\n\nmodule.exports = configure(api => {\n  return async function * put (key, value, options = {}) {\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      ...(\n        await multipartRequest(value, options.headers)\n      )\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map(({ ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }))\n      }\n      yield message\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}