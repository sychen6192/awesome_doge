{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/sychen/thesis-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(paths) {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              paths = Array.isArray(paths) ? paths : [paths];\n              _context.next = 4;\n              return api.post('pin/add', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: paths.map(function (path) {\n                    return \"\".concat(path);\n                  })\n                }, options)),\n                headers: options.headers\n              });\n\n            case 4:\n              _context.next = 6;\n              return _context.sent.json();\n\n            case 6:\n              res = _context.sent;\n              return _context.abrupt(\"return\", (res.Pins || []).map(function (cid) {\n                return {\n                  cid: new CID(cid)\n                };\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["/Users/sychen/thesis-app/node_modules/ipfs-http-client/src/pin/add.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","paths","options","Array","isArray","post","timeout","signal","searchParams","arg","map","path","headers","json","res","Pins","cid"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AAAA,wEAAO,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcC,cAAAA,OAAd,2DAAwB,EAAxB;AACLD,cAAAA,KAAK,GAAGE,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAvC;AADK;AAAA,qBAGoBD,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoB;AAC3CC,gBAAAA,OAAO,EAAEJ,OAAO,CAACI,OAD0B;AAE3CC,gBAAAA,MAAM,EAAEL,OAAO,CAACK,MAF2B;AAG3CC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,EAAER,KAAK,CAACS,GAAN,CAAU,UAAAC,IAAI;AAAA,qCAAOA,IAAP;AAAA,mBAAd;AADwB,mBAE1BT,OAF0B,EAHY;AAO3CU,gBAAAA,OAAO,EAAEV,OAAO,CAACU;AAP0B,eAApB,CAHpB;;AAAA;AAAA;AAAA,mCAWDC,IAXC;;AAAA;AAGCC,cAAAA,GAHD;AAAA,+CAaE,CAACA,GAAG,CAACC,IAAJ,IAAY,EAAb,EAAiBL,GAAjB,CAAqB,UAAAM,GAAG;AAAA,uBAAK;AAAEA,kBAAAA,GAAG,EAAE,IAAItB,GAAJ,CAAQsB,GAAR;AAAP,iBAAL;AAAA,eAAxB,CAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAeD,CAhByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (paths, options = {}) => {\n    paths = Array.isArray(paths) ? paths : [paths]\n\n    const res = await (await api.post('pin/add', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: paths.map(path => `${path}`),\n        ...options\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Pins || []).map(cid => ({ cid: new CID(cid) }))\n  }\n})\n"]},"metadata":{},"sourceType":"script"}